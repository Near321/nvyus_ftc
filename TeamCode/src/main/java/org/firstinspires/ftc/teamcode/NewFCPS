package org.firstinspires.ftc.teamcode;

import android.database.sqlite.SQLiteOpenHelper;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.vuforia.Vuforia;

import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;

import java.util.FormatFlagsConversionMismatchException;

@Autonomous(name = "NewFCPS", group = "Autonomous")
public class NewFCPS extends LinearOpMode {
    MasterVision vision;
    SampleRandomizedPositions goldPosition;

    private DcMotor lift = null;
    private DcMotor leftDrive = null;
    private DcMotor rightDrive = null;
    private DcMotor back_leftDrive = null;
    private DcMotor back_rightDrive = null;
    private DcMotor arm = null;
    private DcMotor arm2 = null;
    private DcMotor extension = null;


    @Override
    public void runOpMode() throws InterruptedException {
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();
        parameters.cameraDirection = VuforiaLocalizer.CameraDirection.BACK;// recommended camera direction
        parameters.vuforiaLicenseKey = "AR17cRr/////AAABmVQdKnZK30kikwF9DjAY7NYj1UW9723C6HMxZjlHm1Y5hTAlU545LLaH/n/rrf1Z1n+H61NjlA5bAOqBfdODHUtvo5vTUNv/yd5v8gw8Am7UXp41c38KOL5ALU5O1G5wsCEYWPcZ7Rd4qTlMj0Eq6kGRUqb3MIlg65SgaGk1z/ZMlprsrI8fiuy3JM6JrvNaK0u3DhnnHnNdWNt0mMcnU3GvFGZCHuktirstOKnzq6baC1XknNzFSmV/hWP+5pPsyZB4PIXGZ1EoSkr7y5mw7W3X5/5Vu1BcgxQLp3j7HZfH4Pej1UfgAeDzCE9pb06UOnO5eYUWyfti/89w5tXVV++V89t+6PAs5qlYPiFsBmhr";

        vision = new MasterVision(parameters, hardwareMap, true, MasterVision.TFLiteAlgorithm.INFER_RIGHT);
        vision.init();// enables the camera overlay. this will take a couple of seconds
        vision.enable();// enables the tracking algorithms. this might also take a little time

        leftDrive = hardwareMap.get(DcMotor.class, "left_drive");
        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");
        back_leftDrive = hardwareMap.get(DcMotor.class, "back_left_drive");
        back_rightDrive = hardwareMap.get(DcMotor.class, "back_right_drive");
        lift = hardwareMap.get(DcMotor.class, "lift");
        arm = hardwareMap.get(DcMotor.class, "arm");
        arm2 = hardwareMap.get(DcMotor.class, "arm");
        extension = hardwareMap.get(DcMotor.class,"extension");
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        back_rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        lift.setDirection(DcMotorSimple.Direction.REVERSE);

        waitForStart();

        vision.disable();// disables tracking algorithms. this will free up your phone's processing power for other jobs.

        goldPosition = vision.getTfLite().getLastKnownSampleOrder();

        while (opModeIsActive()) {
            back_leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
            leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
            leftDrive.setPower(0.3);
            back_leftDrive.setPower(0.3);
            lift.setPower(1);
            //only testing this
            sleep(8000);
            leftDrive.setPower(0);
            back_leftDrive.setPower(0);
            sleep(2000);
            leftDrive.setPower(0);
            lift.setPower(0);
            FrontMove(0.3,125);
            telemetry.addData("goldPosition was", goldPosition);// giving feedback
            switch (goldPosition) { // using for things in the autonomous program
                case LEFT:
                    lift.setDirection(DcMotorSimple.Direction.FORWARD);
                    telemetry.addLine("going to the left");
                    CenterCrab(1,600);
                    //CenterCrab(0.3,250);
                    LeftDiagonal(0.5,4000);
                    Spino(1,1000);
                    BackwardCrab(0.5,500);
                    telemetry.addData("Center Crab","Called");
                    //ArmUpOnly(0.5,500);
                    //Extension(1,4000);
                    //BackMove(0.3,2000);
                    //maybe put these directions
                    /*CenterCrab(0.5,3000);
                    FrontMove(0.3,2000);
                    CenterCrab(0.5,3000);*/
                    /*somewhat decent center code
                    CenterCrab(1,250);
                    FrontMove(0.3,250);
                    CenterCrab(1,1000);
                     */
                    break;
                case CENTER:
                    //lift.setDirection(DcMotorSimple.Direction.FORWARD);
                    telemetry.addLine("going straight");
                    //BackMove(0.3,500);
                    //maybe put these directions in the center crab module
                    //CenterCrab(1,3000)
                    CenterCrab(0.3,2000);
                    BackMove(0.3,250);
                    CenterCrab(1,1200);

                    /*CenterCrab(1,250);
                    FrontMove(0.3,250);
                    CenterCrab(1,1000);*/
                    telemetry.addData("Center Crab","Called");
                    /*rightDrive.setPower(0);
                    back_rightDrive.setPower(0);
                    leftDrive.setPower(0);
                    back_leftDrive.setPower(0);*/
                    break;
                case RIGHT:
                    //lift.setDirection(DcMotorSimple.Direction.FORWARD);
                    //LiftDown(1,7000);
                    telemetry.addLine("going to the right");
                    CenterCrab(1,500);
                    BackMove(0.5,700);
                    RightDiagonal(1,3500); //or 30000
                    //CenterCrab(1,1000);
                    //ArmUpOnly(0.5,4000);
                    break;
                case UNKNOWN:
                    //lift.setDirection(DcMotorSimple.Direction.FORWARD);
                    //LiftDown(1,7000);
                    /*telemetry.addLine("going to the right");
                    BackMove(0.3,500);
                    sleep(1000);
                    CenterCrab(1,1000);
                    sleep(1000);
                    BackMove(0.3,1000);
                    sleep(1000);
                    CenterCrab(1,2000); */
                    telemetry.addLine("going to the right");
                    CenterCrab(1,500);
                    BackMove(0.5,700);
                    RightDiagonal(1,3500); //or 30000
                    //CenterCrab(1,1000);
                    //ArmUpOnly(0.5,4000);
                    break;
            }

            telemetry.update();
            break;
        }

        vision.shutdown();

    }

    public void LiftDown(double power, long time) {
        lift.setPower(power);
        sleep(time);
        lift.setPower(0);

    }
    public void LiftEscape(double power, long time) {
        leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        leftDrive.setPower(power);
        back_leftDrive.setPower(power);
        sleep(time);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);

    }

    public void CenterCrab(double power, long time) {
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        leftDrive.setPower(power);
        rightDrive.setPower(power);
        back_leftDrive.setPower(power);
        back_rightDrive.setPower(power);
        sleep(time);
        leftDrive.setPower(0);
        rightDrive.setPower(0);
        back_leftDrive.setPower(0);
        back_rightDrive.setPower(0);
    }

    public void BackwardCrab(double power, long time) {
        back_leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        leftDrive.setPower(power);
        rightDrive.setPower(power);
        back_leftDrive.setPower(power);
        back_rightDrive.setPower(power);
        sleep(time);
        leftDrive.setPower(0);
        rightDrive.setPower(0);
        back_leftDrive.setPower(0);
        back_rightDrive.setPower(0);
    }

    public void RightDiagonal(double power, long time) {
        /*agressive right
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setPower(1);
        rightDrive.setPower(power);
        back_rightDrive.setPower(0.2);
        leftDrive.setPower(0.2);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        lift.setPower(0);
        */
        ////// /////////// /////////// ////////// ///////////
        /*not right enough
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setPower(1);
        rightDrive.setPower(power);
        back_rightDrive.setPower(0.4);
        leftDrive.setPower(0.4);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        lift.setPower(0);
        */
        //just right?
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setPower(1);
        rightDrive.setPower(power);
        back_rightDrive.setPower(0.33);
        leftDrive.setPower(0.33);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        lift.setPower(0);
    }

    public void LeftDiagonal(double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setPower(0.3);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(0.3);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        lift.setPower(0);

        /*
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setPower(1);
        rightDrive.setPower(0.1);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(0.1);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
        lift.setPower(0); */
    }

    public void SlightLeft (double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        back_rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setPower(0.4);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(0.4);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
    }
    public void FrontMove(double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        lift.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setPower(power);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
    }

    public void BackMove(double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        back_rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setPower(power);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
    }

    public void Spino(double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        back_rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        back_leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setPower(power);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
    }

    public void CounterClockSpino(double power, long time) {
        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        back_rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        back_leftDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setDirection(DcMotorSimple.Direction.FORWARD);
        rightDrive.setPower(power);
        back_rightDrive.setPower(power);
        leftDrive.setPower(power);
        back_leftDrive.setPower(power);
        sleep(time);
        rightDrive.setPower(0);
        back_rightDrive.setPower(0);
        leftDrive.setPower(0);
        back_leftDrive.setPower(0);
    }


    public void ArmUpAndShoot(double power, long time) {
        arm.setDirection(DcMotor.Direction.FORWARD);
        arm2.setDirection(DcMotorSimple.Direction.REVERSE);
        arm.setPower(power);
        arm2.setPower(power);
        extension.setPower(power);
        sleep(time);
        arm.setPower(0);
        arm2.setPower(0);
        extension.setPower(0);

    }

    public void ArmUpOnly(double power, long time) {
        arm.setDirection(DcMotor.Direction.FORWARD);
        arm2.setDirection(DcMotorSimple.Direction.REVERSE);
        arm.setPower(power);
        arm2.setPower(power);
        sleep(time);
        arm.setPower(0);
        arm2.setPower(0);

    }

    public void Extension(double power, long time) {
        extension.setPower(power);
        sleep(time);
        extension.setPower(0);
    }





}
