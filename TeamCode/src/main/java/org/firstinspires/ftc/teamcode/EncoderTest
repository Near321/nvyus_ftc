package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import java.util.Set;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;


@Autonomous(name = "EncoderTest", group = "Autonomous")

public class EncoderTest extends LinearOpMode {

    private ElapsedTime       runtime = new ElapsedTime();

    private DcMotor left_drive;
    private DcMotor right_drive;

    static final double COUNTS_PER_MOTOR_REV = 1440; //counts per rotation for encoder
    static final double DRIVE_GEAR_REDUCTION = 0.5;
    static final double WHEEL_DIAMETER_INCHES = 4.0;
    static final double PI = 3.14159265359;
    static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) / (WHEEL_DIAMETER_INCHES * PI);
    static final double DRIVE_SPEED = 1.0;
    static final double TURN_SPEED = 0.5;

    @Override

    public void runOpMode()
    {

        left_drive = hardwareMap.get(DcMotor.class, "left_drive");
        right_drive = hardwareMap.get(DcMotor.class, "right_drive");
        actuator = hardwareMap.get(DcMotor.class, "actuator");
        telemetry.addData("Status", "Resetting Encoders" );
        telemetry.update();


        left_drive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        right_drive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        left_drive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        right_drive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        left_drive.setDirection(DcMotorSimple.Direction.FORWARD);
        right_drive.setDirection(DcMotor.Direction.REVERSE);

        //wait for game to start (driver presses PLAY)
        waitForStart();


        // Step through each leg of the path,
        // Note: Reverse movement is obtained by setting a negative distance (not speed)
        encoderDrive(1,1,1,1);
        //encoderDrive(DRIVE_SPEED, 48, 48, 5.0);
    /*encoderDrive(DRIVE_SPEED, 48, 48, 5.0);  // Forward 48 inches with a 5 second timeout
    encoderDrive(TURN_SPEED, (PI/2), -(PI/2), 4.0);  // Turn Right 12 inches with a 4 second timeout
    encoderDrive(DRIVE_SPEED, -24, -24, 4.0); // Reverse 24 inches with a 4 second timeout */
        //latch.setPosition(0.45);
        //sleep(1000);


        telemetry.addData("Path", "Complete" );
        telemetry.update();

        left_drive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        right_drive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

    }


    public void encoderDrive(double speed, double leftInches, double rightInches, double timeoutS){
        int newLeftTarget;
        int newRightTarget;



        if(opModeIsActive())
        {

            newLeftTarget = left_drive.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightTarget = right_drive.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            left_drive.setTargetPosition(newLeftTarget);
            right_drive.setTargetPosition(newRightTarget);

            left_drive.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            right_drive.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            runtime.reset();
            left_drive.setPower(Math.abs(speed));
            right_drive.setPower(Math.abs(speed));

            while (opModeIsActive() &&
                    (runtime.seconds() < timeoutS) &&
                    (left_drive.isBusy() && right_drive.isBusy()))
            {

                telemetry.addData("Path1","Running to %7d :%7d", newLeftTarget, newRightTarget);
                telemetry.addData("Path2","Running to %7d :%7d",
                        left_drive.getCurrentPosition(),
                        right_drive.getCurrentPosition());
                telemetry.update();
            }


            //Stop all motion
            left_drive.setPower(0);
            right_drive.setPower(0);

            //Turn off RUN_TO_POSITION
            left_drive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            right_drive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            // sleep(250); //optional pause after each move
        }
    }
}
